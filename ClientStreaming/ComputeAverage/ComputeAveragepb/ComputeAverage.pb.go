// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ComputeAverage/ComputeAveragepb/ComputeAverage.proto

package computeaveragepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ComputeAverageRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageRequest) Reset()         { *m = ComputeAverageRequest{} }
func (m *ComputeAverageRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageRequest) ProtoMessage()    {}
func (*ComputeAverageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b714e3d55800c3, []int{0}
}

func (m *ComputeAverageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageRequest.Unmarshal(m, b)
}
func (m *ComputeAverageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageRequest.Marshal(b, m, deterministic)
}
func (m *ComputeAverageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageRequest.Merge(m, src)
}
func (m *ComputeAverageRequest) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageRequest.Size(m)
}
func (m *ComputeAverageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageRequest proto.InternalMessageInfo

func (m *ComputeAverageRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ComputeAverageResponse struct {
	Average              float64  `protobuf:"fixed64,1,opt,name=average,proto3" json:"average,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageResponse) Reset()         { *m = ComputeAverageResponse{} }
func (m *ComputeAverageResponse) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageResponse) ProtoMessage()    {}
func (*ComputeAverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b714e3d55800c3, []int{1}
}

func (m *ComputeAverageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageResponse.Unmarshal(m, b)
}
func (m *ComputeAverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageResponse.Marshal(b, m, deterministic)
}
func (m *ComputeAverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageResponse.Merge(m, src)
}
func (m *ComputeAverageResponse) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageResponse.Size(m)
}
func (m *ComputeAverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageResponse proto.InternalMessageInfo

func (m *ComputeAverageResponse) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

func init() {
	proto.RegisterType((*ComputeAverageRequest)(nil), "computeaverage.ComputeAverageRequest")
	proto.RegisterType((*ComputeAverageResponse)(nil), "computeaverage.ComputeAverageResponse")
}

func init() {
	proto.RegisterFile("ComputeAverage/ComputeAveragepb/ComputeAverage.proto", fileDescriptor_08b714e3d55800c3)
}

var fileDescriptor_08b714e3d55800c3 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x71, 0xce, 0xcf, 0x2d,
	0x28, 0x2d, 0x49, 0x75, 0x2c, 0x4b, 0x2d, 0x4a, 0x4c, 0x4f, 0xd5, 0x47, 0xe5, 0x16, 0x24, 0xa1,
	0x09, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xf1, 0x25, 0x43, 0x44, 0x13, 0x21, 0xa2, 0x4a,
	0xfa, 0x5c, 0xa2, 0xa8, 0xea, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8, 0xd8,
	0xf2, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xa0, 0x3c, 0x25,
	0x23, 0x2e, 0x31, 0x74, 0x0d, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0x50,
	0x53, 0xc1, 0x5a, 0x18, 0x83, 0x60, 0x5c, 0xa3, 0x1a, 0x74, 0x4b, 0x82, 0x53, 0x8b, 0xca, 0x32,
	0x93, 0x53, 0x85, 0x92, 0xb9, 0xf8, 0x50, 0x25, 0x84, 0x54, 0xf5, 0x50, 0x1d, 0xa8, 0x87, 0xd5,
	0x75, 0x52, 0x6a, 0x84, 0x94, 0x41, 0xdc, 0xa4, 0xc4, 0xa0, 0xc1, 0xe8, 0x24, 0x14, 0x25, 0x80,
	0xaa, 0xb8, 0x20, 0x29, 0x89, 0x0d, 0x1c, 0x1a, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0x2f, 0xc3, 0xa2, 0x45, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ComputeAverageServiceClient is the client API for ComputeAverageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComputeAverageServiceClient interface {
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (ComputeAverageService_ComputeAverageClient, error)
}

type computeAverageServiceClient struct {
	cc *grpc.ClientConn
}

func NewComputeAverageServiceClient(cc *grpc.ClientConn) ComputeAverageServiceClient {
	return &computeAverageServiceClient{cc}
}

func (c *computeAverageServiceClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (ComputeAverageService_ComputeAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ComputeAverageService_serviceDesc.Streams[0], "/computeaverage.ComputeAverageService/ComputeAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeAverageServiceComputeAverageClient{stream}
	return x, nil
}

type ComputeAverageService_ComputeAverageClient interface {
	Send(*ComputeAverageRequest) error
	CloseAndRecv() (*ComputeAverageResponse, error)
	grpc.ClientStream
}

type computeAverageServiceComputeAverageClient struct {
	grpc.ClientStream
}

func (x *computeAverageServiceComputeAverageClient) Send(m *ComputeAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computeAverageServiceComputeAverageClient) CloseAndRecv() (*ComputeAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComputeAverageServiceServer is the server API for ComputeAverageService service.
type ComputeAverageServiceServer interface {
	ComputeAverage(ComputeAverageService_ComputeAverageServer) error
}

// UnimplementedComputeAverageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComputeAverageServiceServer struct {
}

func (*UnimplementedComputeAverageServiceServer) ComputeAverage(srv ComputeAverageService_ComputeAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}

func RegisterComputeAverageServiceServer(s *grpc.Server, srv ComputeAverageServiceServer) {
	s.RegisterService(&_ComputeAverageService_serviceDesc, srv)
}

func _ComputeAverageService_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputeAverageServiceServer).ComputeAverage(&computeAverageServiceComputeAverageServer{stream})
}

type ComputeAverageService_ComputeAverageServer interface {
	SendAndClose(*ComputeAverageResponse) error
	Recv() (*ComputeAverageRequest, error)
	grpc.ServerStream
}

type computeAverageServiceComputeAverageServer struct {
	grpc.ServerStream
}

func (x *computeAverageServiceComputeAverageServer) SendAndClose(m *ComputeAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computeAverageServiceComputeAverageServer) Recv() (*ComputeAverageRequest, error) {
	m := new(ComputeAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ComputeAverageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "computeaverage.ComputeAverageService",
	HandlerType: (*ComputeAverageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ComputeAverage",
			Handler:       _ComputeAverageService_ComputeAverage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ComputeAverage/ComputeAveragepb/ComputeAverage.proto",
}
