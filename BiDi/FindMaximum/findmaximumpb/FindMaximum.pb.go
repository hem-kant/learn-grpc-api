// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Bidi/FindMaximum/findmaximumpb/FindMaximum.proto

package findmaximumpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindMaximumRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumRequest) Reset()         { *m = FindMaximumRequest{} }
func (m *FindMaximumRequest) String() string { return proto.CompactTextString(m) }
func (*FindMaximumRequest) ProtoMessage()    {}
func (*FindMaximumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47a7b331b631a6b, []int{0}
}

func (m *FindMaximumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumRequest.Unmarshal(m, b)
}
func (m *FindMaximumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumRequest.Marshal(b, m, deterministic)
}
func (m *FindMaximumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumRequest.Merge(m, src)
}
func (m *FindMaximumRequest) XXX_Size() int {
	return xxx_messageInfo_FindMaximumRequest.Size(m)
}
func (m *FindMaximumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumRequest proto.InternalMessageInfo

func (m *FindMaximumRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type FindMaximumResponse struct {
	Maximum              int32    `protobuf:"varint,1,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumResponse) Reset()         { *m = FindMaximumResponse{} }
func (m *FindMaximumResponse) String() string { return proto.CompactTextString(m) }
func (*FindMaximumResponse) ProtoMessage()    {}
func (*FindMaximumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b47a7b331b631a6b, []int{1}
}

func (m *FindMaximumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumResponse.Unmarshal(m, b)
}
func (m *FindMaximumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumResponse.Marshal(b, m, deterministic)
}
func (m *FindMaximumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumResponse.Merge(m, src)
}
func (m *FindMaximumResponse) XXX_Size() int {
	return xxx_messageInfo_FindMaximumResponse.Size(m)
}
func (m *FindMaximumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumResponse proto.InternalMessageInfo

func (m *FindMaximumResponse) GetMaximum() int32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func init() {
	proto.RegisterType((*FindMaximumRequest)(nil), "findmaximum.FindMaximumRequest")
	proto.RegisterType((*FindMaximumResponse)(nil), "findmaximum.FindMaximumResponse")
}

func init() {
	proto.RegisterFile("Bidi/FindMaximum/findmaximumpb/FindMaximum.proto", fileDescriptor_b47a7b331b631a6b)
}

var fileDescriptor_b47a7b331b631a6b = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x70, 0xca, 0x4c, 0xc9,
	0xd4, 0x77, 0xcb, 0xcc, 0x4b, 0xf1, 0x4d, 0xac, 0xc8, 0xcc, 0x2d, 0xcd, 0xd5, 0x4f, 0xcb, 0xcc,
	0x4b, 0xc9, 0x85, 0xb0, 0x0b, 0x92, 0x90, 0x65, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb8,
	0x91, 0x14, 0x28, 0xe9, 0x70, 0x09, 0x21, 0xa9, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x12, 0xe3, 0x62, 0xcb, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0x92, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d,
	0x82, 0xf2, 0x94, 0xf4, 0xb9, 0x84, 0x51, 0x54, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49,
	0x70, 0xb1, 0x43, 0xcd, 0x83, 0xaa, 0x87, 0x71, 0x8d, 0x72, 0x50, 0x8c, 0x0f, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x15, 0x0a, 0xe3, 0xe2, 0x46, 0x12, 0x15, 0x92, 0xd7, 0x43, 0x72, 0x91, 0x1e,
	0xa6, 0x73, 0xa4, 0x14, 0x70, 0x2b, 0x80, 0xb8, 0x40, 0x89, 0x41, 0x83, 0xd1, 0x80, 0xd1, 0x89,
	0x3f, 0x8a, 0x17, 0xc5, 0xf3, 0x49, 0x6c, 0x60, 0x1f, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0xd2, 0xd8, 0xeb, 0x25, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FindMaximumServiceClient is the client API for FindMaximumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FindMaximumServiceClient interface {
	FindMaximum(ctx context.Context, opts ...grpc.CallOption) (FindMaximumService_FindMaximumClient, error)
}

type findMaximumServiceClient struct {
	cc *grpc.ClientConn
}

func NewFindMaximumServiceClient(cc *grpc.ClientConn) FindMaximumServiceClient {
	return &findMaximumServiceClient{cc}
}

func (c *findMaximumServiceClient) FindMaximum(ctx context.Context, opts ...grpc.CallOption) (FindMaximumService_FindMaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FindMaximumService_serviceDesc.Streams[0], "/findmaximum.FindMaximumService/FindMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &findMaximumServiceFindMaximumClient{stream}
	return x, nil
}

type FindMaximumService_FindMaximumClient interface {
	Send(*FindMaximumRequest) error
	Recv() (*FindMaximumResponse, error)
	grpc.ClientStream
}

type findMaximumServiceFindMaximumClient struct {
	grpc.ClientStream
}

func (x *findMaximumServiceFindMaximumClient) Send(m *FindMaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *findMaximumServiceFindMaximumClient) Recv() (*FindMaximumResponse, error) {
	m := new(FindMaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FindMaximumServiceServer is the server API for FindMaximumService service.
type FindMaximumServiceServer interface {
	FindMaximum(FindMaximumService_FindMaximumServer) error
}

// UnimplementedFindMaximumServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFindMaximumServiceServer struct {
}

func (*UnimplementedFindMaximumServiceServer) FindMaximum(srv FindMaximumService_FindMaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaximum not implemented")
}

func RegisterFindMaximumServiceServer(s *grpc.Server, srv FindMaximumServiceServer) {
	s.RegisterService(&_FindMaximumService_serviceDesc, srv)
}

func _FindMaximumService_FindMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FindMaximumServiceServer).FindMaximum(&findMaximumServiceFindMaximumServer{stream})
}

type FindMaximumService_FindMaximumServer interface {
	Send(*FindMaximumResponse) error
	Recv() (*FindMaximumRequest, error)
	grpc.ServerStream
}

type findMaximumServiceFindMaximumServer struct {
	grpc.ServerStream
}

func (x *findMaximumServiceFindMaximumServer) Send(m *FindMaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *findMaximumServiceFindMaximumServer) Recv() (*FindMaximumRequest, error) {
	m := new(FindMaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FindMaximumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "findmaximum.FindMaximumService",
	HandlerType: (*FindMaximumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMaximum",
			Handler:       _FindMaximumService_FindMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Bidi/FindMaximum/findmaximumpb/FindMaximum.proto",
}
